---
source: src/commands/tests/mod.rs
expression: "fs::read_to_string(&did_path).unwrap()"
---
type CycleManagement = record {
  refueling_amount : nat;
  initial_supply : nat;
  refueling_threshold : nat;
};
type CycleManagements = record {
  db : CycleManagement;
  vault_intial_supply : nat;
  refueling_interval : nat64;
  proxy : CycleManagement;
  indexer : CycleManagement;
};
type Dai = record { usd : float64 };
type Env = variant { Production; Test; LocalDevelopment };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type HttpsSnapshotIndexerSourceAttrs = record {
  queries : vec record { text; text };
};
type InitError = variant {
  InvalidDestination : text;
  InvalidPrincipal : principal;
  InvalidContent : text;
  InvalidRequest : text;
};
type Result = variant { Ok; Err : InitError };
type Snapshot = record { value : SnapshotValue; timestamp : nat64 };
type SnapshotValue = record { dai : Dai };
type SourceType = variant { evm; https; chainsight };
type Sources = record {
  source : text;
  interval_sec : opt nat32;
  attributes : HttpsSnapshotIndexerSourceAttrs;
  source_type : SourceType;
};
type TransformArgs = record { context : vec nat8; response : HttpResponse };
service : {
  get_last_snapshot : () -> (Snapshot) query;
  get_last_snapshot_value : () -> (SnapshotValue) query;
  get_proxy : () -> (principal);
  get_snapshot : (nat64) -> (Snapshot) query;
  get_snapshot_value : (nat64) -> (SnapshotValue) query;
  get_snapshots : () -> (vec Snapshot) query;
  get_sources : () -> (vec Sources) query;
  get_top_snapshot_values : (nat64) -> (vec SnapshotValue) query;
  get_top_snapshots : (nat64) -> (vec Snapshot) query;
  index : () -> ();
  init_in : (Env, CycleManagements) -> (Result);
  proxy_get_last_snapshot : (vec nat8) -> (vec nat8);
  proxy_get_last_snapshot_value : (vec nat8) -> (vec nat8);
  proxy_get_snapshot : (vec nat8) -> (vec nat8);
  proxy_get_snapshot_value : (vec nat8) -> (vec nat8);
  proxy_get_snapshots : (vec nat8) -> (vec nat8);
  proxy_get_top_snapshot_values : (vec nat8) -> (vec nat8);
  proxy_get_top_snapshots : (vec nat8) -> (vec nat8);
  proxy_snapshots_len : (vec nat8) -> (vec nat8);
  set_task : (nat32, nat32, bool) -> ();
  snapshots_len : () -> (nat64) query;
  transform_https_response : (TransformArgs) -> (HttpResponse) query;
}
